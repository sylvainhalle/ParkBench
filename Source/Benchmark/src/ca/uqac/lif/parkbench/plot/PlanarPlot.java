package ca.uqac.lif.parkbench.plot;

/**
 * General class for all two-dimensional plots with an "x" axis and a
 * "y" axis
 */
public abstract class PlanarPlot extends Plot
{
	/**
	 * Creates an empty plot with title
	 * @param title The title
	 */
	public PlanarPlot(String title)
	{
		super(title);
	}

	/**
	 * The name of the parameter to use as the "x" value of the plot
	 */
	protected String m_paramNameX = "";
	
	/**
	 * The name of the parameter to use as the "y" value of the plot
	 */
	protected String m_paramNameY = "";
	
	/**
	 * The caption for the x-axis
	 */
	protected String m_captionX = "";
	
	/**
	 * The caption for the y-axis
	 */
	protected String m_captionY = "";
	
	/**
	 * Whether the x-axis uses a log scale
	 */
	protected boolean m_logX = false;
	
	/**
	 * Whether the y-axis uses a log scale
	 */
	protected boolean m_logY = false;
	
	/**
	 * Whether the data on each row is normalized (i.e. expressed
	 * as the ratio to the smallest value of the line)
	 */
	protected boolean m_normalizedRows = false;
	
	/**
	 * Sets whether the data on each row is normalized (i.e. expressed
	 * as the ratio to the smallest value of the line)
	 * @param b True to normalize, false to leave the data as is
	 * @return An instance of this planar plot
	 */
	public PlanarPlot normalizeRows(boolean b)
	{
		m_normalizedRows = b;
		return this;
	}
	
	/**
	 * Set the name of the parameter to use as the "x" value of the
	 * plot
	 * @param name The parameter name
	 * @return An instance of this planar plot
	 */
	public PlanarPlot setParameterX(String name)
	{
		m_paramNameX = name;
		return this;
	}

	/**
	 * Set the name of the parameter to use as the "x" value of the
	 * plot
	 * @param name The parameter name
	 * @param caption The caption to use for the x-axis in the graph
	 * @return An instance of this planar plot
	 */
	public PlanarPlot setParameterX(String name, String caption)
	{
		m_paramNameX = name;
		m_captionX = caption;
		return this;
	}

	/**
	 * Set the name of the parameter to use as the "y" value of the
	 * plot
	 * @param name The parameter name
	 * @return An instance of this planar plot
	 */
	public PlanarPlot setParameterY(String name)
	{
		m_paramNameY = name;
		return this;
	}
	
	/**
	 * Sets the x-axis with a logarithmic scale
	 * @return An instance of this planar plot
	 */
	public PlanarPlot setLogscaleX()
	{
		m_logX = true;
		return this;
	}
	
	/**
	 * Sets the y-axis with a logarithmic scale
	 * @return This plot
	 */
	public PlanarPlot setLogscaleY()
	{
		m_logY = true;
		return this;
	}

	
	/**
	 * Set the name of the parameter to use as the "y" value of the
	 * plot
	 * @param name The parameter name
	 * @param caption The caption to use for the y-axis in the graph
	 * @return An instance of this planar plot
	 */
	public PlanarPlot setParameterY(String name, String caption)
	{
		m_paramNameY = name;
		m_captionY = caption;
		return this;
	}
	
	protected StringBuilder createHeader(Terminal term)
	{
		StringBuilder out = new StringBuilder();
		out.append("# File auto-generated by ParkBench\n");
		out.append("set terminal ").append(getTerminalString(term)).append("\n");
		out.append("set title \"").append(m_title).append("\"\n");
		out.append("set key on outside bm\n");
		out.append("set datafile separator \",\"\n");
		out.append("set xlabel \"").append(m_captionX).append("\"\n");
		out.append("set ylabel \"").append(m_captionY).append("\"\n");
		if (m_logX)
		{
			out.append("set logscale x\n");
		}
		if (m_logY)
		{
			out.append("set logscale y\n");
		}
		return out;
	}


}
